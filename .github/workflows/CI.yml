name: Pipline for CI

on:
  push:
    branches: [main, master]
    paths-ignore:
      - Jenkinsfile
      - dist/*
  pull_request:
    branches: [main, master]
    paths-ignore:
      - Jenkinsfile
      - dist/*

jobs:
  Test:
    name: Testing Reactapp
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Intalling Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: npm

      - name: Dependecies instaliing
        run: npm install

      - name: Run Test
        run: npm test | true

  Lint:
    name: Running Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Intalling Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: npm

      - name: Dependecies instaliing
        run: npm install

      - name: Lint Check
        run: npm run lint

  Build:
    name: Build React App
    runs-on: ubuntu-latest
    needs: [Test, Lint]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Intalling Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: npm

      - name: Dependecies instaliing
        run: npm install

      - name: Build App
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  Docker:
    name: Build docker images
    runs-on: ubuntu-latest
    needs: [Build]
    env:
      REGISTRY: ghcr.io
      IMG_NAME: ${{github.repository}}
    # outputs:
    #   image_tag: ${{ steps.set_image_tag.outputs.image_tag }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMG_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:sha-${{ github.sha }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set image tag output
        id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
